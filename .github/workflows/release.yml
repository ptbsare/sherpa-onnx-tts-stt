name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check_version_change.outputs.should_release }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get latest VERSION
        id: get_current_version
        run: |
          VERSION=$(yq '.version' config.yaml)
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
      - name: Get latest release from GitHub API
        id: get_last_release_version
        run: |
          response=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases/latest")
          if echo "$response" | jq -e '.tag_name'; then
            LAST_VERSION=$(echo "$response" | jq -r '.tag_name' | sed 's/^v//')
            echo "LAST_VERSION=$LAST_VERSION" >> $GITHUB_OUTPUT
          else
            echo "No previous releases found or API error, defaulting to version 0.0.0"
            echo "LAST_VERSION=0.0.0" >> $GITHUB_OUTPUT
          fi
      - name: Check need to release or not
        id: check_version_change
        run: |
          CURRENT_VERSION="${{ steps.get_current_version.outputs.VERSION }}"
          LAST_VERSION="${{ steps.get_last_release_version.outputs.LAST_VERSION }}"
          if [ "$CURRENT_VERSION" != "$LAST_VERSION" ]; then
            echo "Version Changed Need to Release"
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            echo "Version NOT Changed, No Need to Release"
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi
  create_release:
    needs: release
    if: ${{ needs.release.outputs.should_release == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Check out
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check VERSION
        id: get_version
        run: |
          VERSION=$(yq '.version' config.yaml)
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
      - name: Generate Release note body.
        id: github_release
        uses: mikepenz/release-changelog-builder-action@v5
        with:
          mode: "HYBRID"
          configurationJson: |
            {
              "template": "#{{CHANGELOG}}",
              "categories": [
                {
                    "title": "## Feature",
                    "labels": ["feat", "feature"]
                },
                {
                    "title": "## Fix",
                    "labels": ["fix", "bug"]
                },
                {
                    "title": "## Performance",
                    "labels": ["perf"]
                },
                {
                    "title": "## Documentation",
                    "labels": ["docs"]
                },
                {
                    "title": "## Chore",
                    "labels": ["chore"]
                },
                {
                    "title": "## Refactor",
                    "labels": ["refactor"]
                },
                {
                    "title": "## Revert",
                    "labels": ["revert"]
                },
                {
                    "title": "## Style",
                    "labels": ["style"]
                },
                {
                    "title": "## Test",
                    "labels": ["test"]
                },
                {
                    "title": "## Other",
                    "labels": []
                }
              ],
              "label_extractor": [
                {
                  "pattern": "^(build|chore|ci|docs|feat|fix|perf|refactor|revert|style|test){1}(\\([\\w\\-\\.]+\\))?(!)?: ([\\w ])+([\\s\\S]*)",
                  "on_property": "title",
                  "target": "$1"
                }
              ]
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Write release note to CHANGELOG.md
        run: |
          echo "${{steps.github_release.outputs.changelog}}" > CHANGELOG.md
      - name: Commit CHANGELOG.md
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add CHANGELOG.md
          git commit -m "docs(CHANGELOG): update release notes"
      - name: Push changes
        run: |
          git push origin main
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.VERSION }}
          release_name: Release v${{ steps.get_version.outputs.VERSION }}
          body: ${{ steps.github_release.outputs.changelog }}